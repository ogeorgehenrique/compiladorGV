# Generated from grammar/CompiladorGV.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,258,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,
        1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,
        1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,
        1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,31,1,31,5,31,187,8,31,10,31,12,31,190,9,31,1,31,
        1,31,1,32,4,32,195,8,32,11,32,12,32,196,1,33,4,33,200,8,33,11,33,
        12,33,201,1,33,1,33,5,33,206,8,33,10,33,12,33,209,9,33,1,33,3,33,
        212,8,33,1,33,1,33,4,33,216,8,33,11,33,12,33,217,1,33,3,33,221,8,
        33,1,33,4,33,224,8,33,11,33,12,33,225,1,33,3,33,229,8,33,3,33,231,
        8,33,1,34,1,34,3,34,235,8,34,1,34,4,34,238,8,34,11,34,12,34,239,
        1,35,1,35,5,35,244,8,35,10,35,12,35,247,9,35,1,36,4,36,250,8,36,
        11,36,12,36,251,1,36,1,36,1,37,1,37,1,37,0,0,38,1,1,3,2,5,3,7,4,
        9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,0,71,35,73,36,75,37,
        1,0,7,3,0,10,10,13,13,34,34,1,0,48,57,2,0,69,69,101,101,2,0,43,43,
        45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,
        10,13,13,32,32,271,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,1,0,0,0,3,82,1,0,0,
        0,5,90,1,0,0,0,7,93,1,0,0,0,9,99,1,0,0,0,11,104,1,0,0,0,13,113,1,
        0,0,0,15,121,1,0,0,0,17,125,1,0,0,0,19,132,1,0,0,0,21,134,1,0,0,
        0,23,136,1,0,0,0,25,138,1,0,0,0,27,140,1,0,0,0,29,142,1,0,0,0,31,
        144,1,0,0,0,33,146,1,0,0,0,35,149,1,0,0,0,37,152,1,0,0,0,39,154,
        1,0,0,0,41,156,1,0,0,0,43,158,1,0,0,0,45,160,1,0,0,0,47,163,1,0,
        0,0,49,166,1,0,0,0,51,168,1,0,0,0,53,170,1,0,0,0,55,173,1,0,0,0,
        57,176,1,0,0,0,59,179,1,0,0,0,61,182,1,0,0,0,63,184,1,0,0,0,65,194,
        1,0,0,0,67,230,1,0,0,0,69,232,1,0,0,0,71,241,1,0,0,0,73,249,1,0,
        0,0,75,255,1,0,0,0,77,78,5,108,0,0,78,79,5,101,0,0,79,80,5,105,0,
        0,80,81,5,97,0,0,81,2,1,0,0,0,82,83,5,101,0,0,83,84,5,115,0,0,84,
        85,5,99,0,0,85,86,5,114,0,0,86,87,5,101,0,0,87,88,5,118,0,0,88,89,
        5,97,0,0,89,4,1,0,0,0,90,91,5,115,0,0,91,92,5,101,0,0,92,6,1,0,0,
        0,93,94,5,115,0,0,94,95,5,101,0,0,95,96,5,110,0,0,96,97,5,97,0,0,
        97,98,5,111,0,0,98,8,1,0,0,0,99,100,5,112,0,0,100,101,5,97,0,0,101,
        102,5,114,0,0,102,103,5,97,0,0,103,10,1,0,0,0,104,105,5,101,0,0,
        105,106,5,110,0,0,106,107,5,113,0,0,107,108,5,117,0,0,108,109,5,
        97,0,0,109,110,5,110,0,0,110,111,5,116,0,0,111,112,5,111,0,0,112,
        12,1,0,0,0,113,114,5,114,0,0,114,115,5,101,0,0,115,116,5,116,0,0,
        116,117,5,111,0,0,117,118,5,114,0,0,118,119,5,110,0,0,119,120,5,
        97,0,0,120,14,1,0,0,0,121,122,5,105,0,0,122,123,5,110,0,0,123,124,
        5,116,0,0,124,16,1,0,0,0,125,126,5,115,0,0,126,127,5,116,0,0,127,
        128,5,114,0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,5,103,
        0,0,131,18,1,0,0,0,132,133,5,40,0,0,133,20,1,0,0,0,134,135,5,41,
        0,0,135,22,1,0,0,0,136,137,5,123,0,0,137,24,1,0,0,0,138,139,5,125,
        0,0,139,26,1,0,0,0,140,141,5,44,0,0,141,28,1,0,0,0,142,143,5,59,
        0,0,143,30,1,0,0,0,144,145,5,61,0,0,145,32,1,0,0,0,146,147,5,43,
        0,0,147,148,5,43,0,0,148,34,1,0,0,0,149,150,5,45,0,0,150,151,5,45,
        0,0,151,36,1,0,0,0,152,153,5,43,0,0,153,38,1,0,0,0,154,155,5,45,
        0,0,155,40,1,0,0,0,156,157,5,42,0,0,157,42,1,0,0,0,158,159,5,47,
        0,0,159,44,1,0,0,0,160,161,5,61,0,0,161,162,5,61,0,0,162,46,1,0,
        0,0,163,164,5,33,0,0,164,165,5,61,0,0,165,48,1,0,0,0,166,167,5,62,
        0,0,167,50,1,0,0,0,168,169,5,60,0,0,169,52,1,0,0,0,170,171,5,60,
        0,0,171,172,5,61,0,0,172,54,1,0,0,0,173,174,5,62,0,0,174,175,5,61,
        0,0,175,56,1,0,0,0,176,177,5,38,0,0,177,178,5,38,0,0,178,58,1,0,
        0,0,179,180,5,124,0,0,180,181,5,124,0,0,181,60,1,0,0,0,182,183,5,
        33,0,0,183,62,1,0,0,0,184,188,5,34,0,0,185,187,8,0,0,0,186,185,1,
        0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,191,1,
        0,0,0,190,188,1,0,0,0,191,192,5,34,0,0,192,64,1,0,0,0,193,195,7,
        1,0,0,194,193,1,0,0,0,195,196,1,0,0,0,196,194,1,0,0,0,196,197,1,
        0,0,0,197,66,1,0,0,0,198,200,7,1,0,0,199,198,1,0,0,0,200,201,1,0,
        0,0,201,199,1,0,0,0,201,202,1,0,0,0,202,203,1,0,0,0,203,207,5,46,
        0,0,204,206,7,1,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,
        0,0,207,208,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,210,212,3,69,
        34,0,211,210,1,0,0,0,211,212,1,0,0,0,212,231,1,0,0,0,213,215,5,46,
        0,0,214,216,7,1,0,0,215,214,1,0,0,0,216,217,1,0,0,0,217,215,1,0,
        0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,221,3,69,34,0,220,219,1,
        0,0,0,220,221,1,0,0,0,221,231,1,0,0,0,222,224,7,1,0,0,223,222,1,
        0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,228,1,
        0,0,0,227,229,3,69,34,0,228,227,1,0,0,0,228,229,1,0,0,0,229,231,
        1,0,0,0,230,199,1,0,0,0,230,213,1,0,0,0,230,223,1,0,0,0,231,68,1,
        0,0,0,232,234,7,2,0,0,233,235,7,3,0,0,234,233,1,0,0,0,234,235,1,
        0,0,0,235,237,1,0,0,0,236,238,7,1,0,0,237,236,1,0,0,0,238,239,1,
        0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,70,1,0,0,0,241,245,7,4,
        0,0,242,244,7,5,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,
        0,0,245,246,1,0,0,0,246,72,1,0,0,0,247,245,1,0,0,0,248,250,7,6,0,
        0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,
        0,252,253,1,0,0,0,253,254,6,36,0,0,254,74,1,0,0,0,255,256,9,0,0,
        0,256,257,6,37,1,0,257,76,1,0,0,0,15,0,188,196,201,207,211,217,220,
        225,228,230,234,239,245,251,2,6,0,0,1,37,0
    ]

class CompiladorGVLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LEIA = 1
    ESCREVA = 2
    SE = 3
    SENAO = 4
    PARA = 5
    ENQUANTO = 6
    RETORNA = 7
    TIPO_INT = 8
    TIPO_STRING = 9
    ABRE_PAR = 10
    FECHA_PAR = 11
    ABRE_CHAVE = 12
    FECHA_CHAVE = 13
    VIRGULA = 14
    FINAL = 15
    RECEBE = 16
    INCREMENTO = 17
    DECREMENTO = 18
    PLUS = 19
    MINUS = 20
    MULT = 21
    DIV = 22
    IGUAL_EXATO = 23
    DIFERENTE = 24
    MAIOR_Q = 25
    MENOR_Q = 26
    MENOR_IGUAL_Q = 27
    MAIOR_IGUAL_Q = 28
    AND = 29
    OR = 30
    NOT = 31
    STRING = 32
    INTEIRO = 33
    FLOAT = 34
    ID = 35
    WS = 36
    ERRO = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'leia'", "'escreva'", "'se'", "'senao'", "'para'", "'enquanto'", 
            "'retorna'", "'int'", "'string'", "'('", "')'", "'{'", "'}'", 
            "','", "';'", "'='", "'++'", "'--'", "'+'", "'-'", "'*'", "'/'", 
            "'=='", "'!='", "'>'", "'<'", "'<='", "'>='", "'&&'", "'||'", 
            "'!'" ]

    symbolicNames = [ "<INVALID>",
            "LEIA", "ESCREVA", "SE", "SENAO", "PARA", "ENQUANTO", "RETORNA", 
            "TIPO_INT", "TIPO_STRING", "ABRE_PAR", "FECHA_PAR", "ABRE_CHAVE", 
            "FECHA_CHAVE", "VIRGULA", "FINAL", "RECEBE", "INCREMENTO", "DECREMENTO", 
            "PLUS", "MINUS", "MULT", "DIV", "IGUAL_EXATO", "DIFERENTE", 
            "MAIOR_Q", "MENOR_Q", "MENOR_IGUAL_Q", "MAIOR_IGUAL_Q", "AND", 
            "OR", "NOT", "STRING", "INTEIRO", "FLOAT", "ID", "WS", "ERRO" ]

    ruleNames = [ "LEIA", "ESCREVA", "SE", "SENAO", "PARA", "ENQUANTO", 
                  "RETORNA", "TIPO_INT", "TIPO_STRING", "ABRE_PAR", "FECHA_PAR", 
                  "ABRE_CHAVE", "FECHA_CHAVE", "VIRGULA", "FINAL", "RECEBE", 
                  "INCREMENTO", "DECREMENTO", "PLUS", "MINUS", "MULT", "DIV", 
                  "IGUAL_EXATO", "DIFERENTE", "MAIOR_Q", "MENOR_Q", "MENOR_IGUAL_Q", 
                  "MAIOR_IGUAL_Q", "AND", "OR", "NOT", "STRING", "INTEIRO", 
                  "FLOAT", "EXPONENT", "ID", "WS", "ERRO" ]

    grammarFileName = "CompiladorGV.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[37] = self.ERRO_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def ERRO_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
             print(f"ERRO LÉXICO [Linha {self.line}, Coluna {self.column+1}]: Símbolo '{self.text}' inválido."); 
     


